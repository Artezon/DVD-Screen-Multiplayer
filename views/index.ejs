<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:ital,opsz,wght@0,14..32,100..900;1,14..32,100..900&family=Nunito:ital,wght@0,200..1000;1,200..1000&family=Onest:wght@100..900&display=swap" rel="stylesheet">
    <title>Bouncing DVD - Multiplayer Edition</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        
        body {
            font-family: 'Nunito', 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Helvetica', 'Arial', sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            background-attachment: fixed;
            height: 100svh;
            color: #ffffff;
        }

        .container {
            display: flex;
            height: 100%;
            gap: 20px;
            padding: 20px;
        }

        .left-panel {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .controls {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
        }

        .controls-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 20px;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background: #10b981;
            box-shadow: 0 0 10px rgba(16, 185, 129, 0.5);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {

            0%,
            100% {
                opacity: 1;
            }

            50% {
                opacity: 0.5;
            }
        }

        .controls-title {
            font-size: 18px;
            font-weight: 600;
            margin: 0;
        }

        .ping {
            margin-left: auto;
            background: rgba(0, 0, 0, 0.2);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .form-row {
            display: flex;
            gap: 12px;
            margin-bottom: 16px;
        }

        .form-group {
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: 6px;
        }

        .form-group.color {
            flex: 0 0 80px;
        }

        label {
            font-size: 12px;
            font-weight: 500;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            opacity: 0.9;
        }

        input[type="text"] {
            background: rgba(255, 255, 255, 0.15);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            padding: 12px;
            color: #ffffff;
            font-size: 14px;
            transition: all 0.3s ease;
        }

        input[type="text"]:focus {
            outline: none;
            border-color: rgba(255, 255, 255, 0.4);
            background: rgba(255, 255, 255, 0.2);
        }

        input[type="text"]:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        input[type="color"] {
            width: 100%;
            height: 44px;
            background: none;
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 8px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        input[type="color"]:hover {
            border-color: rgba(255, 255, 255, 0.4);
        }

        .join-btn {
            background: linear-gradient(135deg, #10b981, #059669);
            border: none;
            border-radius: 8px;
            padding: 12px 24px;
            color: white;
            font-size: 14px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .join-btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 20px rgba(16, 185, 129, 0.4);
        }

        .join-btn.leave {
            background: linear-gradient(135deg, #ef4444, #dc2626);
        }

        .join-btn.leave:hover {
            box-shadow: 0 4px 20px rgba(239, 68, 68, 0.4);
        }

        .game-area {
            flex: 1;
            background: rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 16px;
            position: relative;
            overflow: hidden;
        }

        .canvas {
            width: 100%;
            height: 100%;
            display: block;
        }

        .right-panel {
            width: 300px;
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        .player-list {
            background: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(20px);
            border: 1px solid rgba(255, 255, 255, 0.2);
            border-radius: 16px;
            padding: 24px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            flex: 1;
            overflow: auto;
            scrollbar-width: thin;
            scrollbar-color: rgba(0, 0, 0, 0.7) transparent;
        }

        .player-list-header {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
        }

        .player-list-title {
            font-size: 16px;
            font-weight: 600;
        }

        .player-count {
            background: rgba(255, 255, 255, 0.2);
            padding: 2px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }

        .player-item {
            background: rgba(255, 255, 255, 0.05);
            border: 1px solid rgba(255, 255, 255, 0.1);
            border-radius: 12px;
            padding: 16px;
            margin-bottom: 12px;
            transition: all 0.3s ease;
        }

        .player-item:hover {
            background: rgba(255, 255, 255, 0.1);
            border-color: rgba(255, 255, 255, 0.2);
        }

        .player-item.own-player {
            border-color: #10b981;
            background: rgba(16, 185, 129, 0.1);
        }

        .player-header {
            display: flex;
            align-items: center;
            gap: 12px;
            margin-bottom: 12px;
        }

        .player-color {
            width: 20px;
            height: 20px;
            border-radius: 50%;
            border: 2px solid rgba(255, 255, 255, 0.3);
        }

        .player-name {
            font-weight: 600;
            font-size: 14px;
            flex: 1;
        }

        .corner-score {
            background: rgba(255, 255, 255, 0.2);
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 600;
        }

        .player-stats {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 8px;
            font-size: 11px;
            opacity: 0.8;
        }

        .stat {
            display: flex;
            justify-content: space-between;
        }

        .connection-status {
            background: rgba(0, 0, 0, 0.2);
            padding: 4px 12px;
            border-radius: 20px;
            font-size: 12px;
            font-weight: 500;
        }

        .connection-status.connected {
            background: rgba(16, 185, 129, 0.2);
            border: 1px solid #10b981;
            color: #10b981;
        }

        .connection-status.disconnected {
            background: rgba(239, 68, 68, 0.2);
            border: 1px solid #ef4444;
            color: #ef4444;
        }

        .spectator-notice {
            position: absolute;
            top: 20px;
            left: 20px;
            background: rgba(0, 0, 0, 0.7);
            backdrop-filter: blur(10px);
            padding: 8px 16px;
            border-radius: 20px;
            font-size: 12px;
            opacity: 0.9;
        }

        @media (max-width: 1200px) {
            .right-panel {
                width: 250px;
            }
        }

        @media (max-width: 768px) {
            .container {
                flex-direction: column;
                height: auto;
                min-height: 100vh;
            }

            .right-panel {
                width: 100%;
                order: -1;
            }

            .game-area {
                min-height: 400px;
            }
        }
    </style>
</head>

<body>
    <div class="connection-status" style="display: none;" id="connectionStatusOld">Connecting...</div>

    <div class="container">
        <div class="left-panel">
            <div class="controls">
                <div class="controls-header">
                    <div class="status-dot"></div>
                    <h2 class="controls-title">Bouncing DVD - Multiplayer Edition</h2>
                    <div class="ping" id="pingDisplay">Ping: --ms</div>
                </div>

                <div class="form-row">
                    <div class="form-group">
                        <label for="nickname">Nickname</label>
                        <input type="text" id="nickname" placeholder="Enter your nickname">
                    </div>
                    <div class="form-group color">
                        <label for="color">Color</label>
                        <input type="color" id="color">
                    </div>
                </div>

                <div style="display: flex; align-items: center; gap: 16px;">
                    <button class="join-btn" id="joinBtn">Join Game</button>
                    <div class="connection-status" id="connectionStatus">Connecting...</div>
                    <div id="playtimeDisplay" style="display: none; color: rgba(255, 255, 255, 0.9); font-size: 14px;">
                        <span id="playtimeValue">00:00:00</span>
                    </div>
                </div>
            </div>

            <div class="game-area">
                <canvas class="canvas" id="gameCanvas"></canvas>
                <div class="spectator-notice" id="spectatorNotice" style="display: none;">
                    👀 Spectating - Join to play!
                </div>
            </div>
        </div>

        <div class="right-panel">
            <div class="player-list">
                <div class="player-list-header">
                    <h3 class="player-list-title">Online</h3>
                    <div class="player-count" id="playerCount">0 players</div>
                </div>
                <div id="playerListContent">
                    <div style="text-align: center; opacity: 0.6; padding: 40px 0;">
                        No players online
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        class GameClient {
            constructor() {
                this.ws = null;
                this.isPlayer = false;
                this.myPlayerId = null;
                this.players = new Map();
                this.canvas = document.getElementById('gameCanvas');
                this.ctx = this.canvas.getContext('2d');
                this.board = { width: 800, height: 600 };
                this.ping = 0;
                this.lastPingTime = 0;
                this.playerJoinTimes = new Map();
                this.lastUpdateTime = Date.now();

                this.initializeUI();
                this.connect();
                this.startPingLoop();
                this.startRenderLoop();
                this.startClientPrediction();
            }

            startClientPrediction() {
                // Update client-side predictions
                setInterval(() => {
                    const now = Date.now();
                    const dt = (now - this.lastUpdateTime) / 1000;
                    this.lastUpdateTime = now;

                    // Predict movement for all players
                    for (const player of this.players.values()) {
                        if (player.pos && player.velocity) {
                            this.predictPlayerMovement(player, dt);
                        }
                    }
                }, 1000 / 120); // 120fps client prediction
            }

            predictPlayerMovement(player, dt) {
                if (!player.velocity || !player.pos || !player.size) return;

                // Predict new position
                let newX = player.pos.x + player.velocity.x * dt;
                let newY = player.pos.y + player.velocity.y * dt;

                const halfW = player.size.x / 2;
                const halfH = player.size.y / 2;

                // Handle X-axis wall collisions
                if (newX < halfW) {
                    newX = halfW;
                    player.velocity.x *= -1;
                } else if (newX > this.board.width - halfW) {
                    newX = this.board.width - halfW;
                    player.velocity.x *= -1;
                }

                // Handle Y-axis wall collisions
                if (newY < halfH) {
                    newY = halfH;
                    player.velocity.y *= -1;
                } else if (newY > this.board.height - halfH) {
                    newY = this.board.height - halfH;
                    player.velocity.y *= -1;
                }

                // Update predicted position
                player.pos.x = newX;
                player.pos.y = newY;
            }

            initializeUI() {
                // Generate random nickname
                const adjectives = ['Swift', 'Bouncy', 'Lightning', 'Neon', 'Cosmic', 'Stellar', 'Rapid', 'Dynamic'];
                const nouns = ['Ball', 'Sphere', 'Orb', 'Comet', 'Star', 'Bolt', 'Flash', 'Rocket'];
                const randomNick = adjectives[Math.floor(Math.random() * adjectives.length)] +
                    nouns[Math.floor(Math.random() * nouns.length)] +
                    Math.floor(Math.random() * 999);

                document.getElementById('nickname').value = randomNick;

                // Generate random color
                const colors = ['#ff6b6b', '#4ecdc4', '#45b7d1', '#96ceb4', '#feca57', '#ff9ff3', '#54a0ff', '#5f27cd'];
                document.getElementById('color').value = colors[Math.floor(Math.random() * colors.length)];

                // Event listeners
                document.getElementById('joinBtn').addEventListener('click', () => {
                    if (this.isPlayer) {
                        this.leaveGame();
                    } else {
                        this.joinGame();
                    }
                });

                // Resize canvas
                this.resizeCanvas();
                window.addEventListener('resize', () => this.resizeCanvas());
            }

            resizeCanvas() {
                const container = this.canvas.parentElement;
                const rect = container.getBoundingClientRect();
                this.canvas.width = rect.width;
                this.canvas.height = rect.height;
            }

            connect() {
                const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
                const wsUrl = `${protocol}//${window.location.host}/ws/game`;

                this.ws = new WebSocket(wsUrl);

                this.ws.onopen = () => {
                    this.updateConnectionStatus(true);
                };

                this.ws.onmessage = (event) => {
                    const data = JSON.parse(event.data);
                    this.handleMessage(data);
                };

                this.ws.onclose = () => {
                    this.updateConnectionStatus(false);
                    setTimeout(() => this.connect(), 3000); // Reconnect after 3 seconds
                };

                this.ws.onerror = () => {
                    this.updateConnectionStatus(false);
                };
            }

            handleMessage(data) {
                switch (data.type) {
                    case 'spectator_init':
                        this.isPlayer = false;
                        this.myPlayerId = null;
                        this.board = data.board;
                        this.updatePlayersData(data.players);
                        this.updateUI();
                        break;

                    case 'player_init':
                        this.isPlayer = true;
                        this.myPlayerId = data.playerId;
                        this.board = data.board;
                        this.updatePlayersData(data.players);
                        this.playerJoinTimes.set(this.myPlayerId, Date.now());
                        this.updateUI();
                        this.startPlaytimeTimer();
                        break;

                    case 'spectator_mode':
                        this.isPlayer = false;
                        this.myPlayerId = null;
                        this.updatePlayersData(data.players);
                        this.updateUI();
                        this.stopPlaytimeTimer();
                        break;

                    case 'new_player':
                        // Add new player to existing players
                        this.players.set(data.player.id, data.player);
                        this.playerJoinTimes.set(data.player.id, Date.now());
                        this.updatePlayerList();
                        break;

                    case 'player_left':
                        // Remove player who left
                        this.players.delete(data.playerId);
                        this.playerJoinTimes.delete(data.playerId);
                        this.updatePlayerList();
                        break;

                    case 'state':
                        this.updatePlayersData(data.players);
                        break;

                    case 'pong':
                        this.ping = Date.now() - this.lastPingTime;
                        document.getElementById('pingDisplay').textContent = `Ping: ${this.ping}ms`;
                        break;
                }
            }

            updatePlayersData(playersArray) {
                let playersChanged = false;
                let cornerCountsChanged = false;

                // Update existing players with new data, preserving cached properties
                playersArray.forEach(playerUpdate => {
                    const existingPlayer = this.players.get(playerUpdate.id);
                    if (existingPlayer) {
                        // Check if corner count actually changed (only if it's in the update)
                        if ('cornerHits' in playerUpdate && playerUpdate.cornerHits !== existingPlayer.cornerHits) {
                            cornerCountsChanged = true;
                        }

                        // Server data is authoritative - completely replace predicted values
                        if (playerUpdate.pos) {
                            existingPlayer.pos.x = playerUpdate.pos.x;
                            existingPlayer.pos.y = playerUpdate.pos.y;
                        }

                        if (playerUpdate.velocity) {
                            existingPlayer.velocity.x = playerUpdate.velocity.x;
                            existingPlayer.velocity.y = playerUpdate.velocity.y;
                        }

                        // Merge other properties (but only if they exist in the update)
                        Object.assign(existingPlayer, playerUpdate);
                    } else {
                        // New player - add to map and track join time
                        this.players.set(playerUpdate.id, playerUpdate);
                        this.playerJoinTimes.set(playerUpdate.id, Date.now());
                        playersChanged = true;
                    }
                });

                // Remove players that are no longer in the update
                const currentPlayerIds = new Set(playersArray.map(p => p.id));
                for (const [playerId] of this.players) {
                    if (!currentPlayerIds.has(playerId)) {
                        const playerName = this.players.get(playerId)?.nickname || 'Unknown';
                        this.players.delete(playerId);
                        this.playerJoinTimes.delete(playerId);
                        playersChanged = true;
                    }
                }

                // Only re-render player list if something that affects it changed
                if (playersChanged || cornerCountsChanged) {
                    this.updatePlayerList();
                }
            }

            updatePlayerList() {
                const playersArray = Array.from(this.players.values());
                playersArray.sort((a, b) => (b.cornerHits || 0) - (a.cornerHits || 0));

                document.getElementById('playerCount').textContent = `${playersArray.length} players`;

                const listContent = document.getElementById('playerListContent');
                if (playersArray.length === 0) {
                    listContent.innerHTML = '<div style="text-align: center; opacity: 0.6; padding: 40px 0;">No players online</div>';
                    return;
                }

                listContent.innerHTML = playersArray.map(player => {
                    const joinTime = this.playerJoinTimes.get(player.id) || Date.now();
                    const playTime = this.formatTime(Date.now() - joinTime);
                    const isOwnPlayer = player.id === this.myPlayerId;

                    return `
                        <div class="player-item ${isOwnPlayer ? 'own-player' : ''}">
                            <div class="player-header">
                                <div class="player-color" style="background-color: ${player.color}"></div>
                                <div class="player-name">${player.nickname}</div>
                            </div>
                            <div style="font-size: 11px; opacity: 0.8; margin-top: 8px;">
                                Corner hit count: <strong>${player.cornerHits || 0}</strong>
                            </div>
                        </div>
                    `;
                }).join('');
            }

            formatTime(milliseconds) {
                const seconds = Math.floor(milliseconds / 1000);
                const hours = Math.floor(seconds / 3600);
                const minutes = Math.floor((seconds % 3600) / 60);
                const remainingSeconds = seconds % 60;

                return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}:${remainingSeconds.toString().padStart(2, '0')}`;
            }

            updateUI() {
                const joinBtn = document.getElementById('joinBtn');
                const nicknameInput = document.getElementById('nickname');
                const colorInput = document.getElementById('color');
                const spectatorNotice = document.getElementById('spectatorNotice');
                const playtimeDisplay = document.getElementById('playtimeDisplay');

                if (this.isPlayer) {
                    joinBtn.textContent = 'Leave Game';
                    joinBtn.className = 'join-btn leave';
                    nicknameInput.disabled = true;
                    colorInput.disabled = true;
                    spectatorNotice.style.display = 'none';
                    playtimeDisplay.style.display = 'block';
                } else {
                    joinBtn.textContent = 'Join Game';
                    joinBtn.className = 'join-btn';
                    nicknameInput.disabled = false;
                    colorInput.disabled = false;
                    spectatorNotice.style.display = 'block';
                    playtimeDisplay.style.display = 'none';
                }
            }

            startPlaytimeTimer() {
                this.playtimeStart = Date.now();
                this.playtimeInterval = setInterval(() => {
                    const elapsed = Date.now() - this.playtimeStart;
                    document.getElementById('playtimeValue').textContent = this.formatTime(elapsed);
                }, 1000);
            }

            stopPlaytimeTimer() {
                if (this.playtimeInterval) {
                    clearInterval(this.playtimeInterval);
                    this.playtimeInterval = null;
                }
            }

            updateConnectionStatus(connected) {
                const status = document.getElementById('connectionStatus');
                if (connected) {
                    status.textContent = 'Connected';
                    status.className = 'connection-status connected';
                } else {
                    status.textContent = 'Disconnected';
                    status.className = 'connection-status disconnected';
                    this.players.clear();
                }
            }

            joinGame() {
                const nickname = document.getElementById('nickname').value.trim();
                const color = document.getElementById('color').value;

                if (!nickname) {
                    alert('Please enter a nickname');
                    return;
                }

                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({
                        type: 'join',
                        nickname: nickname,
                        color: color
                    }));
                }
            }

            leaveGame() {
                if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                    this.ws.send(JSON.stringify({
                        type: 'leave'
                    }));
                }
            }

            startPingLoop() {
                setInterval(() => {
                    if (this.ws && this.ws.readyState === WebSocket.OPEN) {
                        this.lastPingTime = Date.now();
                        this.ws.send(JSON.stringify({ type: 'ping' }));
                    }
                }, 1000);
            }

            startRenderLoop() {
                const render = () => {
                    this.renderGame();
                    requestAnimationFrame(render);
                };
                render();
            }

            renderGame() {
                const { width, height } = this.canvas;
                this.ctx.clearRect(0, 0, width, height);

                if (this.players.size === 0) {
                    // Show empty state
                    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.3)';
                    this.ctx.font = '24px Nunito';
                    this.ctx.textAlign = 'center';
                    this.ctx.fillText('Waiting for players...', width / 2, height / 2);
                    return;
                }

                // Calculate scale to fit board in canvas
                const scaleX = width / this.board.width;
                const scaleY = height / this.board.height;
                const scale = Math.min(scaleX, scaleY);

                const offsetX = (width - this.board.width * scale) / 2;
                const offsetY = (height - this.board.height * scale) / 2;

                this.ctx.save();
                this.ctx.translate(offsetX, offsetY);
                this.ctx.scale(scale, scale);

                // Draw board background
                this.ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
                this.ctx.fillRect(0, 0, this.board.width, this.board.height);

                // Draw board border
                this.ctx.strokeStyle = 'rgba(255, 255, 255, 0.3)';
                this.ctx.lineWidth = 2 / scale;
                this.ctx.strokeRect(0, 0, this.board.width, this.board.height);

                // Draw players
                for (const player of this.players.values()) {
                    // Skip if player data is incomplete
                    if (!player.pos || !player.size || !player.color) {
                        continue;
                    }

                    this.ctx.fillStyle = player.color;

                    if (player.id === this.myPlayerId) {
                        // Highlight own player
                        this.ctx.shadowColor = player.color;
                        this.ctx.shadowBlur = 20;
                    }

                    const playerWidth = player.size.x || 20;
                    const playerHeight = player.size.y || 20;

                    this.ctx.fillRect(
                        player.pos.x - playerWidth / 2,
                        player.pos.y - playerHeight / 2,
                        playerWidth,
                        playerHeight
                    );

                    // Draw nickname
                    this.ctx.fillStyle = 'rgba(255, 255, 255, 0.9)';
                    this.ctx.font = `${12 / scale}px Nunito`;
                    this.ctx.textAlign = 'center';
                    this.ctx.shadowBlur = 0;
                    this.ctx.fillText(
                        player.nickname || 'Unknown',
                        player.pos.x,
                        player.pos.y - playerHeight / 2 - 8 / scale
                    );
                }

                this.ctx.restore();
            }
        }

        // Start the game client
        new GameClient();
    </script>
</body>

</html>